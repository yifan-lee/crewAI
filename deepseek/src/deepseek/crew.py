from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai.agents.agent_builder.base_agent import BaseAgent
# from crewai_tools import SerperDevTool, RagTool, FileReadTool, FileWriterTool, PDFSearchTool
from typing import List
from llm import deepseek_ollama
from langchain_core.tools import tool
from typing import Type, Union
from pydantic import BaseModel, Field
from crewai.tools import BaseTool
# If you want to run a snippet of code before or after the crew starts,
# you can use the @before_kickoff and @after_kickoff decorators
# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators
# === Custom tool: generate PPT and charts from a structured JSON string to outputs/figures ===
class MakeChartsInput(BaseModel):
    spec: Union[str, dict] = Field(..., description="JSON string or dict with {'charts':[{'title','type','data':[{'x','y'}]}]}.")

class MakeChartsTool(BaseTool):
    name: str = "make_charts"
    description: str = "Render charts to ./outputs/figures/*.png from a chart spec JSON."
    args_schema: Type[BaseModel] = MakeChartsInput

    def _run(self, spec: Union[str, dict]) -> str:
        import json, os
        from pathlib import Path
        import pandas as pd
        import matplotlib.pyplot as plt

        payload = json.loads(spec) if isinstance(spec, str) else spec
        charts = payload.get("charts", [])
        out_dir = Path("./outputs"); out_dir.mkdir(parents=True, exist_ok=True)
        fig_dir = out_dir / "figures"; fig_dir.mkdir(parents=True, exist_ok=True)

        paths = []
        for i, ch in enumerate(charts, 1):
            title = ch.get("title", f"Chart {i}")
            ctype = (ch.get("type") or "line").lower()
            data = ch.get("data", [])
            df = pd.DataFrame(data)
            if not {"x","y"}.issubset(df.columns):
                continue
            plt.figure()
            plt.plot(df["x"], df["y"]) if ctype == "line" else plt.bar(df["x"], df["y"])
            plt.title(title); plt.tight_layout()
            p = fig_dir / f"chart_{i}.png"
            plt.savefig(p); plt.close()
            paths.append(str(p))
        return json.dumps({"figure_paths": paths})
class MakePPTInput(BaseModel):
    json_input: Union[str, dict] = Field(..., description="A JSON string or dict with title/sections/charts/sources.")

class MakePPTAndChartsTool(BaseTool):
    name: str = "make_ppt_and_charts"
    description: str = (
        "Generate a PPT (./outputs/report.pptx) and charts (./outputs/figures) from the given JSON."
    )
    args_schema: Type[BaseModel] = MakePPTInput

    def _run(self, json_input: Union[str, dict]) -> str:
        import json
        from pathlib import Path
        import pandas as pd
        import matplotlib.pyplot as plt
        from pptx import Presentation
        from pptx.util import Inches

        # Parse JSON (supports both str and dict)
        try:
            if isinstance(json_input, str):
                payload = json.loads(json_input)
            else:
                payload = json_input  # already a dict
        except Exception as e:
            return f"[ReportPPTTool] JSON parse failed: {e}"

        title = payload.get("title", "Automated Report")
        sections = payload.get("sections", [])
        charts = payload.get("charts", [])
        sources = payload.get("sources", [])

        # Output dirs
        out_dir = Path("./outputs"); out_dir.mkdir(parents=True, exist_ok=True)
        fig_dir = out_dir / "figures"; fig_dir.mkdir(parents=True, exist_ok=True)

        # Charts
        chart_paths = []
        for i, ch in enumerate(charts, 1):
            ch_title = ch.get("title", f"Chart {i}")
            ch_type = (ch.get("type") or "bar").lower()
            data = ch.get("data", [])
            try:
                df = pd.DataFrame(data)
            except Exception:
                continue

            # column detection
            if {"label","value"}.issubset(df.columns):
                x, y = df["label"], df["value"]
            elif {"x","y"}.issubset(df.columns):
                x, y = df["x"], df["y"]
            elif df.shape[1] >= 2:
                x, y = df.iloc[:,0], df.iloc[:,1]
            else:
                continue

            plt.figure()
            if ch_type == "line":
                plt.plot(x, y)
            else:
                plt.bar(x, y)
            plt.title(ch_title)
            plt.tight_layout()
            out_png = fig_dir / f"chart_{i}.png"
            plt.savefig(out_png)
            plt.close()
            chart_paths.append((ch_title, str(out_png)))

        # PPT
        prs = Presentation()
        slide = prs.slides.add_slide(prs.slide_layouts[0])
        slide.shapes.title.text = title
        slide.placeholders[1].text = "Generated by CrewAI"

        for sec in sections:
            s = prs.slides.add_slide(prs.slide_layouts[1])
            s.shapes.title.text = sec.get("heading", "Section")
            body = s.placeholders[1].text_frame
            body.clear()
            for idx, bullet in enumerate(sec.get("bullets", []) or []):
                p = body.paragraphs[0] if idx == 0 else body.add_paragraph()
                p.text = str(bullet); p.level = 0

        for ch_title, png in chart_paths:
            s = prs.slides.add_slide(prs.slide_layouts[5])
            s.shapes.title.text = ch_title
            s.shapes.add_picture(png, Inches(1), Inches(1.5), height=Inches(4.5))

        if sources:
            s = prs.slides.add_slide(prs.slide_layouts[1])
            s.shapes.title.text = "References and Sources"
            body = s.placeholders[1].text_frame
            body.clear()
            for idx, url in enumerate(sources):
                p = body.paragraphs[0] if idx == 0 else body.add_paragraph()
                p.text = str(url); p.level = 0

        out_pptx = out_dir / "report.pptx"
        prs.save(out_pptx)
        return f"[ReportPPTTool] Generated {out_pptx.resolve()}, charts saved in {fig_dir.resolve()}"

    def _arun(self, *args, **kwargs):
        raise NotImplementedError
@CrewBase
class Deepseek():
    """Deepseek crew"""

    llm = deepseek_ollama
    agents: List[BaseAgent]
    tasks: List[Task]

    # Learn more about YAML configuration files here:
    # Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended
    # Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended
    
    # If you would like to add tools to your agents, you can learn more about it here:
    # https://docs.crewai.com/concepts/agents#agent-tools
    @agent
    def scrapper(self) -> Agent:


        return Agent(
            config=self.agents_config['scrapper'], # type: ignore[index]
            verbose=True,
            llm = self.llm,
        )

    @agent
    def researcher(self) -> Agent:

        return Agent(
            config=self.agents_config['researcher'], # type: ignore[index]
            verbose=False,
            llm = self.llm,
            #tools = [self.researcher_tool]  # Adding tools to the researcher agent
        ) #researcher agent does not have a tool.

    @agent
    def builder(self) -> Agent:
        #Pending addition of PPT tool
        
        return Agent(
            config=self.agents_config['builder'], # type: ignore[index]
            verbose=True,
            llm = self.llm,
            tools=[MakePPTAndChartsTool()],  # ← 挂上PPT+图表工具
        )

    @agent
    def summary_md_writer(self) -> Agent:
        return Agent(
            config=self.agents_config['summary_md_writer'],
            verbose=True,
            llm=self.llm,
        )

    @agent
    def chart_maker(self) -> Agent:
        # 需要一个“生成图片”的工具（见下一节“作图工具”）
        return Agent(
            config=self.agents_config['chart_maker'],
            verbose=True,
            llm=self.llm,
            tools=[MakeChartsTool()],  # 见下文
        )

    @agent
    def ppt_json_writer(self) -> Agent:
        return Agent(
            config=self.agents_config['ppt_json_writer'],
            verbose=True,
            llm=self.llm,
        )

    @agent
    def slide_builder(self) -> Agent:
        return Agent(
            config=self.agents_config['slide_builder'],
            verbose=True,
            llm=self.llm,
            tools=[MakePPTAndChartsTool()],  # 你已有
        )
        
    # To learn more about structured task outputs,
    # task dependencies, and task callbacks, check out the documentation:
    # https://docs.crewai.com/concepts/tasks#overview-of-a-task
    @task
    def scrapping_task(self) -> Task:

        return Task(
            config=self.tasks_config['scrapping_task'], # type: ignore[index]
            output_file='./outputs/scrapper_output.md'  # Output file to save the scraped data
        )
    #?Conditional Task
    @task
    def researching_task(self) -> Task:

        return Task(
            config=self.tasks_config['researching_task'], # type: ignore[index]
            output_file='./outputs/resarcher_output.md'
        )
    
        """         return ConditionalTask(
            config=self.tasks_config['researching_task'], # type: ignore[index]
            output_file='resarcher_output.md',
            condition = web_result_exists
        ) """

    @task
    def building_task(self) -> Task:
        return Task(
            config=self.tasks_config['building_task'], # type: ignore[index]
            output_file='./outputs/builder_output.md'
        )
    
    @task
    def summary_md_task(self) -> Task:
        return Task(
            config=self.tasks_config['summary_md_task'],
            output_file='./outputs/summary.md',
            context=[self.researching_task()],  # 让它能看到研究结果
        )

    @task
    def charting_task(self) -> Task:
        return Task(
            config=self.tasks_config['charting_task'],
            output_file='./outputs/charts.json',
            context=[self.summary_md_task()],  # 用 MD 作为输入
        )

    @task
    def ppt_json_task(self) -> Task:
        return Task(
            config=self.tasks_config['ppt_json_task'],
            output_file='./outputs/ppt_payload.json',
            context=[self.summary_md_task(), self.charting_task()],  # 同时看 summary 和 charts
        )

    @task
    def slide_build_task(self) -> Task:
        return Task(
            config=self.tasks_config['slide_build_task'],
            output_file='./outputs/slide_build_log.md',
            context=[self.ppt_json_task()],  # 用最终 JSON 去调用 PPT 工具
        )

    @crew
    def crew(self) -> Crew:
        """Creates the Powerpoint_Helper crew"""
        # To learn how to add knowledge sources to your crew, check out the documentation:
        # https://docs.crewai.com/concepts/knowledge#what-is-knowledge
        
        # Set custom storage location

        return Crew(
            agents=self.agents, # Automatically created by the @agent decorator
            tasks=self.tasks, # Automatically created by the @task decorator
            process=Process.sequential,
            memory=True,  # Enable memory to store task outputs
            embedder={
                "provider": "ollama",
                "config": {
                    "model": "mxbai-embed-large",  # or "nomic-embed-text"
                    "url": "http://localhost:11434/api/embeddings"  # Default Ollama URL
                }
            },
            verbose=True,
            # process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/
        )
